version: '3'
services:
  router:
    container_name: router
    image: router
    build: 
      context: ./router
    volumes:
      - ./router:/home
    working_dir: /home
    ports:
      - "8080:8080"
    depends_on:
      - microservices-etcd
    links:
      - microservices-etcd
    command: sh -c "sleep 4 && ./douyin-server"

  microservices-etcd:
    container_name: microservices-etcd
    image: microservices-etcd
    build:
      context: ./microservices/etcd
    volumes:
      - ./microservices/etcd/data:/etcd-data
      - ./microservices/etcd/config:/config
    ports:
      - "2379:2379"
    command: ["/bin/bash", "/run.sh"]

  microservices-feed:
    container_name: microservices-feed
    image: microservices-feed
    build:
      context: ./microservices/feed
    volumes:
      - ./microservices/feed:/home
    working_dir: /home
    ports:
      - "8880:8880"
    depends_on:
      - microservices-etcd
      - mysql2redis
    links:
      - microservices-etcd
      - mysql-master
      - mysql-slave
      - redis
      - jaeger
      - gorse
    command: sh -c "sleep 4 && ./feed"
  
  microservices-user:
    container_name: microservices-user
    image: microservices-user
    build:
      context: ./microservices/user
    volumes:
      - ./microservices/user:/home
    working_dir: /home
    ports:
      - "8881:8881"
    depends_on:
      - microservices-etcd
      - mysql2redis
    links:
      - microservices-etcd
      - mysql-master
      - mysql-slave
      - redis
      - jaeger
      - gorse
    command: sh -c "sleep 4 && ./user"

  microservices-favorite:
    container_name: microservices-favorite
    image: microservices-favorite
    build:
      context: ./microservices/favorite
    volumes:
      - ./microservices/favorite:/home
    working_dir: /home
    ports:
      - "8882:8882"
    depends_on:
      - microservices-etcd
      - mysql2redis
    links:
      - microservices-etcd
      - mysql-master
      - mysql-slave
      - redis
      - jaeger
      - gorse
    command: sh -c "sleep 4 && ./favorite"

  microservices-comment:
    container_name: microservices-comment
    image: microservices-comment
    build:
      context: ./microservices/comment
    volumes:
      - ./microservices/comment:/home
    working_dir: /home
    ports:
      - "8883:8883"
    depends_on:
      - microservices-etcd
      - mysql2redis
    links:
      - microservices-etcd
      - mysql-master
      - mysql-slave
      - redis
      - jaeger
      - gorse
    command: sh -c "sleep 4 && ./comment"

  microservices-publish:
    container_name: microservices-publish
    image: microservices-publish
    build:
      context: ./microservices/publish
    volumes:
      - ./microservices/publish:/home
      - /etc/ssl/certs:/etc/ssl/certs
    working_dir: /home
    ports:
      - "8884:8884"
    depends_on:
      - microservices-etcd
      - mysql2redis
    links:
      - microservices-etcd
      - mysql-master
      - mysql-slave
      - redis
      - jaeger
      - gorse
    command: sh -c "sleep 4 && ./publish"

  microservices-relation:
    container_name: microservices-relation
    image: microservices-relation
    build:
      context: ./microservices/relation
    volumes:
      - ./microservices/relation:/home
    working_dir: /home
    ports:
      - "8885:8885"
    depends_on:
      - microservices-etcd
      - mysql2redis
    links:
      - microservices-etcd
      - mysql-master
      - mysql-slave
      - redis
      - jaeger
    command: sh -c "sleep 4 && ./relation"
  
  microservices-message:
    container_name: microservices-message
    image: microservices-message
    build:
      context: ./microservices/message
    volumes:
      - ./microservices/message:/home
    working_dir: /home
    ports:
      - "8886:8886"
    depends_on:
      - microservices-etcd
      - mysql2redis
    links:
      - microservices-etcd
      - mysql-master
      - mysql-slave
      - redis
      - jaeger
    command: sh -c "sleep 4 && ./message"

  mysql-master:
    image: mysql
    container_name: mysql-master
    ports:
    - '3306:3306'
    restart: always
    hostname: mysql-master
    environment:
      MYSQL_ROOT_PASSWORD: "123456"
      MASTER_SYNC_USER: "sync_admin"
      MASTER_SYNC_PASSWORD: "123456"
      ADMIN_USER: "root"
      ADMIN_PASSWORD: "123456"
      TZ: "Asia/Shanghai"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: 50m
    healthcheck:
      test: ["CMD","mysqladmin","-uroot","-p$${MYSQL_ROOT_PASSWORD}","ping","-h","localhost"]
      timeout: 2s
      interval: 2.5s
      retries: 5
      start_period: 2s
    logging:
      options:
        max-file: '1'
        max-size: '128k'
    command:
    -  "--server-id=1"
    -  "--character-set-server=utf8mb4"
    -  "--collation-server=utf8mb4_unicode_ci"
    -  "--log-bin=mysql-bin"
    -  "--sync_binlog=1"
    -  "--binlog-ignore-db=mysql"
    -  "--binlog-ignore-db=sys"
    -  "--binlog-ignore-db=performance_schema"
    -  "--binlog-ignore-db=information_schema"
    -  "--sql_mode=NO_AUTO_VALUE_ON_ZERO,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,PIPES_AS_CONCAT,ANSI_QUOTES"
    volumes:
    - ./database/mysql/init/master:/docker-entrypoint-initdb.d
    - ./database/mysql/data/master:/var/lib/mysql
  mysql-slave:
    image: mysql
    container_name: mysql-slave
    ports:
    - '3307:3306'
    restart: always
    hostname: mysql-slave
    environment:
      MYSQL_ROOT_PASSWORD: "123456"
      SLAVE_SYNC_USER: "sync_admin"
      SLAVE_SYNC_PASSWORD: "123456"
      ADMIN_USER: "root"
      ADMIN_PASSWORD: "123456"
      MASTER_HOST: "mysql-master"
      TZ: "Asia/Shanghai"
    healthcheck: 
      test: ["CMD","mysqladmin","-uroot","-p$${MYSQL_ROOT_PASSWORD}","ping","-h","localhost"]
      timeout: 2s
      interval: 2.5s
      retries: 5
      start_period: 2s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: 50m
    logging:
      options:
        max-file: '1'
        max-size: '128k'
    depends_on:
      mysql-master:
        condition: service_healthy
    command:
    -  "--server-id=2"
    -  "--character-set-server=utf8mb4"
    -  "--collation-server=utf8mb4_unicode_ci"
    -  "--sql_mode=NO_AUTO_VALUE_ON_ZERO,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,PIPES_AS_CONCAT,ANSI_QUOTES"
    volumes:
    - ./database/mysql/init/slave:/docker-entrypoint-initdb.d
    - ./database/mysql/data/slave:/var/lib/mysql


  redis:
    container_name: redis
    image: redis
    build:
      context: ./database/redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 2.5s
      timeout: 2s
      retries: 3
    volumes:
      - ./database/redis/data:/data

  mysql2redis:
    container_name: mysql2redis
    image: mysql2redis
    build:
      context: ./database/mysql2redis
    volumes:
      - ./database/mysql2redis/mysqldump/mysqldump:/usr/bin/mysqldump
      - ./database/mysql2redis:/home
    working_dir: /home
    healthcheck:
      test: ["NONE"]
    depends_on:
      mysql-master:
        condition: service_healthy
      mysql-slave:
        condition: service_healthy
      redis:
        condition: service_healthy
    links:
      - mysql-master
      - redis
    command: sh -c "./main"

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one
    build:
      context: ./jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_OTLP_HTTP_TLS=true
    ports:
      - "4318:4318"
      - "16686:16686"
    depends_on:
      - microservices-etcd

  gorse:
    container_name: gorse
    image: zhenghaoz/gorse-in-one
    build:
      context: ./middleware/gorse
    ports:
      - "8088:8088"
    volumes:
      - ./middleware/gorse/config/config.toml:/etc/gorse/config.toml
    depends_on:
      mysql-master:
        condition: service_healthy
      mysql-slave:
        condition: service_healthy  
    # command: --playground
    

  # rabbitmq:
  #   container_name: rabbitmq
  #   image: rabbitmq
  #   build:
  #     context: ./rabbitmq
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   environment:
  #     - RABBITMQ_DEFAULT_USER=admin
  #     - RABBITMQ_DEFAULT_PASS=admin
      
    
    
